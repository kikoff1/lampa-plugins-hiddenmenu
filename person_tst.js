// Super Simple Favorite Actors Plugin
lampa_plugin_favorite_actors = {
    init: function() {
        console.log("Simple Favorite Actors Plugin loaded!");
        
        this.favorites = JSON.parse(localStorage.getItem('simple_fav_actors') || '[]');
        
        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –≤ –º–µ–Ω—é
        this.addMenu();
        
        // –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–∫–∏ –∞–∫—Ç–æ—Ä—ñ–≤
        this.addActorButtons();
        
        // –°–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—î–º–æ –∑–∞ –∑–º—ñ–Ω–∞–º–∏
        this.startWatching();
    },
    
    addMenu: function() {
        setInterval(() => {
            const menu = document.querySelector('.main--menu');
            if (menu && !menu.querySelector('.simple-fav-actors')) {
                const item = document.createElement('div');
                item.className = 'main--item simple-fav-actors';
                item.innerHTML = `
                    <div class="main--icon">‚ù§Ô∏è</div>
                    <div class="main--title">–ú–æ—ó –∞–∫—Ç–æ—Ä–∏ (${this.favorites.length})</div>
                `;
                item.onclick = () => this.showFavorites();
                menu.appendChild(item);
            }
        }, 1000);
    },
    
    addActorButtons: function() {
        setInterval(() => {
            document.querySelectorAll('.person--selector').forEach(card => {
                if (card.querySelector('.simple-fav-btn')) return;
                
                const container = card.querySelector('.selector');
                const nameElem = card.closest('.person')?.querySelector('.person--name');
                
                if (container && nameElem) {
                    const name = nameElem.textContent.trim();
                    const isFav = this.favorites.some(a => a.name === name);
                    
                    const btn = document.createElement('div');
                    btn.className = 'selector--button simple-fav-btn';
                    btn.innerHTML = `
                        <div class="selector--icon">${isFav ? '‚ù§Ô∏è' : 'ü§ç'}</div>
                        <div class="selector--title">${isFav ? '–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è' : '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è'}</div>
                    `;
                    
                    btn.onclick = (e) => {
                        e.stopPropagation();
                        this.toggleFavorite(name);
                    };
                    
                    container.appendChild(btn);
                }
            });
        }, 2000);
    },
    
    toggleFavorite: function(actorName) {
        const actor = {name: actorName, id: actorName};
        const index = this.favorites.findIndex(a => a.name === actorName);
        
        if (index > -1) {
            this.favorites.splice(index, 1);
            this.showMessage(`–í–∏–¥–∞–ª–µ–Ω–æ ${actorName}`);
        } else {
            this.favorites.push(actor);
            this.showMessage(`–î–æ–¥–∞–Ω–æ ${actorName}`);
        }
        
        localStorage.setItem('simple_fav_actors', JSON.stringify(this.favorites));
        this.updateAllButtons();
    },
    
    updateAllButtons: function() {
        document.querySelectorAll('.simple-fav-btn').forEach(btn => {
            const name = btn.closest('.person')?.querySelector('.person--name')?.textContent?.trim();
            if (name) {
                const isFav = this.favorites.some(a => a.name === name);
                btn.querySelector('.selector--icon').textContent = isFav ? '‚ù§Ô∏è' : 'ü§ç';
                btn.querySelector('.selector--title').textContent = isFav ? '–í—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è' : '–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è';
            }
        });
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –º–µ–Ω—é
        const menuItem = document.querySelector('.simple-fav-actors .main--title');
        if (menuItem) {
            menuItem.textContent = `–ú–æ—ó –∞–∫—Ç–æ—Ä–∏ (${this.favorites.length})`;
        }
    },
    
    showFavorites: function() {
        const html = `
            <div style="padding:20px">
                <h1 style="color:white; margin-bottom:20px">–ú–æ—ó —É–ª—é–±–ª–µ–Ω—ñ –∞–∫—Ç–æ—Ä–∏</h1>
                ${this.favorites.length ? 
                    this.favorites.map(actor => `
                        <div style="background:#333; padding:15px; margin:10px 0; border-radius:8px; display:flex; justify-content:space-between; align-items:center">
                            <span style="color:white">${actor.name}</span>
                            <button onclick="lampa_plugin_favorite_actors.removeActor('${actor.name}')" 
                                    style="background:red; color:white; border:none; padding:5px 10px; border-radius:4px">
                                –í–∏–¥–∞–ª–∏—Ç–∏
                            </button>
                        </div>
                    `).join('') :
                    '<div style="color:#888; text-align:center; padding:40px">–©–µ –Ω–µ–º–∞—î —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–∫—Ç–æ—Ä—ñ–≤</div>'
                }
            </div>
        `;
        
        Lampa.Page?.show({html: html}) || alert("–°—Ç–æ—Ä—ñ–Ω–∫–∞ —É–ª—é–±–ª–µ–Ω–∏—Ö –∞–∫—Ç–æ—Ä—ñ–≤:\n" + this.favorites.map(a => a.name).join('\n'));
    },
    
    removeActor: function(name) {
        this.toggleFavorite(name);
        this.showFavorites();
    },
    
    showMessage: function(text) {
        Lampa.Notify?.show(text) || console.log(text);
    },
    
    startWatching: function() {
        setInterval(() => {
            this.updateAllButtons();
        }, 5000);
    }
};

// –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫
if (window.Lampa) {
    lampa_plugin_favorite_actors.init();
} else {
    document.addEventListener('lampa-loaded', () => {
        lampa_plugin_favorite_actors.init();
    });
}